If you see text such as `index.html:45`, it's referring to the file `index.html` and line `45`. `index.js:DoSomething()` refer's to the file `index.html` and function `DoSomething()`. Most objectives are written to be easily Googled into a solution.

The tutorial is designed as a series of objectives and tasks. The tasks will come with enough information to complete, but if you find yourself stuck there is an answer provided, which is uncovered when clicked on.

The number of answer's uncovered is tallied in the top-right, but it's important to stress that it's okay to use all or none of the answers, they are simply designed to let you challenge yourself to spend a short period trying to solve it yourself.

All data is stored locally, your progress is not stored online.

# Install the IDE, and start a blank project

Similar to Visual Studio, other tools exist to help developers build products. 
Visual Code is Microsoft's latest release, designed to be easier for web development.

## Install and open Visual Studio Code

**Install** the Visual Studio Code (VS-Code) IDE from Microsoft and **open it**. You can accept all default settings.

<Answer>

* Visit https://code.visualstudio.com/ and click "Download for Windows"
* Once the file has downloaded, install it, accepting all defaults.

</Answer>

## Open an empty folder

**Create** and **open** an empty folder.

<Answer>

* Click "Open folder..."
* Create a directory
* Then select `Open it`

</Answer>

## Open VS-Code's in-built Terminal

**Terminal**s are where you can input commands for the system to run. Current modern Web Development uses many tools to product websites, so it's easier to have a terminal always open to command from. **Open** the in-build terminal now.

<Answer>

* In the menu at the top, click View, then select Terminal.

</Answer>

# Setup the build pipeline

## Install ParcelJs via NPM

ParcelJs is one of the aforementioned tools we'll be using. It takes the code you write, adds a collection of useful functionality for you as a developer, then hosts a server locally for you to view in a browser.

NPM (otherwise known as the Node Package Manager) is another tool which allows you to easily download and install tools and libraries of code with one line commands. It's highly advised here to **google** "install parceljs" and read their "Getting Started" page for help.

<Answer>

* Run `npm install -g parcel-bundler` in the Terminal

</Answer>

## Initialise npm project

To keep track of the libraries of code (known as packages in NPM), we need to create a project. Unlike Visual Studio which does this via a fancy GUI, we use another command from npm to do this.

Create a blank project, and accept all the defaults. As before **google** is the answer.

<Answer>

* Run `npm init -y` in the Terminal

</Answer>

## Create new file called `index.js`

Here we're going to create our first script file. These files run code once they're loaded in the user's browser. We're creating a `.js` file, meaning we'll be writing in JavaScript (JS).

Our script is going to do the work of uploading data to the server and responding to user-input, but for now we'll leave it empty.

<Answer>

* Right click on the left-hand panel and select "New File"
* Type `index.js`

</Answer>

## Create new file called `index.html`

While the name doesn't matter exactly, it's good convention to use something like "index" for the starting point of the site.

What does matter is that the ending is `.html` (Hyper-Text Markup Language) given this tells parceljs that this file describes how the website should **look**.

<Answer>

* Right click on the left-hand panel and select "New File"
* Type `index.html`

</Answer>

## Setup starting code in `index.html`

Type into `index.html`. 

HTML is written in XML. XML uses greater-than and less-than characters to define `tags`. Tags must be opened with something like `<example>` and closed with the same name prefixed with a forward-slash `</example>`.

````html
<html>
    <body>
        <script src="./index.js"></script>
    </body>
</html>
````

The tags here work as follows:

* `<html>` means it's the start of an HTML file. This is more a matter of legacy than anything (HTML is very old), but it's important to have.
* `<body>` is where the visible parts of the site start. On larger websites there are a few things before the `<body>` that have other functionality.
* `<script>` is mostly to cheer up parceljs given it requires it. It means the your browser will include that script when you view the website.

## Run ParcelJs

It's time to actually view our website. To do this we're going to use parceljs by running the command in our Terminal. 

* Run `parcel ./index.html` in the Terminal

## Open the site in a browser

If the command worked correctly, it should have outputted an address with `localhost` in it. Open up a good browser (personal preference of course) and visit the address.

<Answer>

* Go to the site http://localhost:1234 in your favourite browser.

</Answer>

# Output some text

## Write "Hello, World!" to the Browser

After `index.html:3` enter on a new line `Hello, World!` and save. Then confirm that the text appears in the Browser. If you're lucky, it shouldn't have had to reload.

```html
<html>
    <body>
        <script src="./index.js"></script>
    </body>
</html>
```vs
<html>
    <body>
        <script src="./index.js"></script>
        Hello, World!
    </body>
</html>
```

## Open the Browser Console

Unlike C# which goes out of it's way to make debugging easy within Visual Studio, debugging in Web Development is slightly harder. To make things easier, almost all browser's ship with development tools built into them.

The tools have a huge amount of power behind them, but for now we'll mostly just be using them to see output from our code.

<Answer>

* Type `Ctrl-Shift-I` with the Browser in focus.

</Answer>

## Output "Hello, World!" to the browser console
 
Now we have a working website, we need to add some code to start doing more complicated operations. We'll start small just outputting some text into the console.

From this point onwards, when you're **googling** each step, you'll need to be slightly more specific. To do this it's often a good idea to preix the query with the language your working with, JavaScript.

<Answer>

Replace `index.js` with:

```javascript
console.log("Hello, World!");
```

</Answer>

# Create some inputs

We know how to show text on the website, but what we're interested in is something the user can interact with.

## Add an input box

Input's are tags in HTML that allow us to show various things to the user that they can interact with. By default, or when their `type` is `text`, then they are shown as text-boxes.

Add a single `input` element, with a `type` of `text` and an `id` of `MyLatitudeInput` before the `<script>` tag.

<Answer>

It's worth stressing that it has to be before the `<script>` tag, this is to make our life easier later.

```html
<html>
    <body>
        <script src="./index.js"></script>
        Hello, World!
    </body>
</html>
```vs
<html>
    <body>
        <input type="text" id="MyLatitudeInput" />
        <script src="./index.js"></script>
    </body>
</html>
```

</Answer>

It should end up looking something like this:

![Input](./pics/input.png)

## Add a button

Buttons are another type of `<input>` but they instead have a `type` of `button`. 

Add a single `input` element to the page, with a `type` of `button` and an `id` of `MySubmitButton`.

<Answer>
 
Write `<input type="button" id="MySubmitButton" value="Do something" />` into `index.html` before the `<script>` tag.

```html
<html>
    <body>
        <input type="text" id="MyLatitudeInput" />
        <script src="./index.js"></script>
    </body>
</html>
```vs
<html>
    <body>
        <input type="text" id="MyLatitudeInput" />
        <input type="button" id="MySubmitButton" value="Do something" />
        <script src="./index.js"></script>
    </body>
</html>
```

</Answer>


It should look something like this:

![Input and Button](./pics/inputButton.png)

# Write a function

Function's are blocks of code that can be called multiple times. Replace all of `index.js` with the following:

```javascript
console.log("Hello, World");
```vs
// Define a function called Add
function DoSomething() {
    
    // When called, write to console
    console.log("Hello, World!")
}

// Call the function
DoSomething();
```

What this is doing, is creating a function called `DoSomething()`, and then calling it via `DoSomething()`.

# Learn to use the debugger

We're going to taken an aside here to learn about the debugger. You've already seen how good browsers have Tools to help development, including a debugger. We're going to use it now.

Swap out the `console.log` line with simply `debugger`.

```javascript
// Define a function called Add
function DoSomething() {
    
    // When called, write to console
    console.log("Hello, World!")
}

// Call the function
DoSomething();
```vs
// Define a function called Add
function DoSomething() {
    
    // Start the debugger when 
    // your code gets to here
    debugger
}

// Call the function
DoSomething();
```

# Call a function when a button's clicked

Add the following line to the end of `index.js`. 

This isn't the recommended way of doing it, so extra points if someone can tell me why this is bad, and why we're doing it here.

```javascript
// Define a function called Add
function DoSomething() {

    // When called, write to console
    console.log("Hello, World!")
}

// Call the function
DoSomething();
```vs
// Define a function called Add
function DoSomething() {

    // When called, write to console
    console.log("Hello, World!")
}

// Call the function when clicked
document.getElementById("MySubmitButton").onclick = DoSomething;
```

Here we are using the function `getElementById` to find the input we created in `index.html` and giving it the same `id` we set over there.

Now, when you click the button, you'll see "Hello, World!" outputted to the console.

# Write the contents of `MyLatitudeInput` to console on button-click

Get the `value` of the text input field using JavaScript, and output it to the console when you click the button.

<Answer>

```javascript
// Define a function called Add
function DoSomething() {

    // When called, write to console
    console.log("Hello, World!")
}

// Call the function when clicked
document.getElementById("MySubmitButton").onclick = DoSomething;
```vs
// Define a function called Add
function DoSomething() {

    let inputElement = document.getElementById("MyLatitudeInput").value;

    // When called, write to console
    console.log(inputElement.value);
}

// Call the function when clicked
document.getElementById("MySubmitButton").onclick = DoSomething;
```

</Answer>

You'll likely encounter an error here where you're told `Property 'value' does not exist on type 'HTMLElement'`. This is because javascript can't tell for sure what kind of element was returned by the function. Feel free to either solve this, or consider fixing this bug to be the first <StretchGoal>StretchGoal</StretchGoal>

# Wrap the value of `MyLatitudeInput` into an object

Objects are how you can store structured data when coding.
